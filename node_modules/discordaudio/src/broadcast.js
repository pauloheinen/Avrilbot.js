const voice = require('@discordjs/voice');
const {EventEmitter} = require('events');

class Broadcast extends EventEmitter{
    /**
     * Creates a broadcast.
     * @param {string} stream The stream to play in the broadcast.
     * @param {object} options Optional options.
     * @example
     * const broadcast = new Broadcast('https://somecoolsite.com/somereallycoolstream.mp3', {
     *   noListeners: 'play', // What to do if there are no members in the voice channel
     *   volume: 1, // The volume of the stream, max volume is 1
     * });
     */
    constructor(stream, options = {noListeners: 'pause', volume: 1}){
        if(typeof stream === 'undefined' || stream === undefined || stream === "") throw new Error(`Stream is required`);
        super();

        this.stream = stream;

        var volume = 1;
        var noSubscribers = voice.NoSubscriberBehavior.Pause;
        if(options){
            if(options.noListeners){
                if(options.noListeners.toLowerCase() === 'pause') noSubscribers = voice.NoSubscriberBehavior.Pause;
                else if(options.noListeners.toLowerCase() === 'stop') noSubscribers = voice.NoSubscriberBehavior.Stop;
                else if(options.noListeners.toLowerCase() === 'play') noSubscribers = voice.NoSubscriberBehavior.Play;
            }
            if(options.volume){
                if(isNaN(options.volume)) throw new Error(`Volume is not a number`);
                else if(options.volume > 1) throw new Error(`Volume may not be higher than 1`);
                else volume = options.volume;
            }
        }

        this.player = voice.createAudioPlayer({
            behaviors: {
                noSubscriber: noSubscribers
            }
        });

        this.resource = voice.createAudioResource(stream, {
            inlineVolume: true,
            inputType: voice.StreamType.Arbitrary
        });
        this.resource.volume.setVolume(volume);

        this.resource.playStream.on('end', () => {
            this.emit('end');
        });

        this.player.play(this.resource);
        this.emit('play');
        voice.entersState(this.player, voice.AudioPlayerStatus.Playing, 5e3);

        this.player.pause();
    }
    /**
     * Pauses the stream
     * @example
     * broadcast.pause();
     */
    pause(){
        this.player.pause();
    }
    /**
     * Resumes the paused stream.
     * @example
     * broadcast.resume();
     */
    resume(){
        this.player.unpause();
    }
    /**
     * Destroys the broadcast.
     * @example
     * broadcast.destroy();
     */
    destroy(){
        this.player.removeAllListeners();
        this.resource.playStream.destroy();
        this.destroy();
    }
    /**
     * Changes the volume of the broadcast.
     * @param {number} volume The volume of the broadcast.
     * @example
     * broadcast.volume(1); // Sets the volume to 1/1.
     */
    volume(volume = 1){
        if(typeof volume === 'undefined' || volume === undefined || volume === "") throw new Error(`Volume is required`);
        if(isNaN(volume)) throw new Error(`Volume is not a number`);
        else if(volume > 1) throw new Error(`Volume may not be higher than 1`);

        this.resource.volume.setVolume(volume);
    }
}

module.exports = Broadcast;