"use strict";
const SpotifyUrl = require('./Classes/getInfoSpotify.js');
const Utils = require('./Classes/Utils.js');

module.exports = {
    getTrack: getTrack,
    getPlaylist: getPlaylist,
    getAlbum: getAlbum,
    isValidTrack: isValidTrack
}

function getTrack(url) {
    return new Promise((res) => {
        try {
            SpotifyUrl.getTracks(url).then((info) => {
                if (info.error) return res(null)
                return res(Utils.getData(info));
            })
        } catch (err) {
            return res(null)
        }
    });
}
function getPlaylist(url) {
    try {
        return new Promise((res) => {
            SpotifyUrl.getTracks(url).then(async (info) => {
                if (!info || info.error) return res(null)

                let responseItems = Promise.all(info.map(async (track) => {
                    const author = track?.artists[0] && track?.artists[0]?.id ? track?.artists[0] : track?.artists;
                    return {
                        id: track?.id,
                        title: `${author?.name} - ${track?.name}`,
                        url: `https://open.spotify.com/track/${track.id}`,
                        author: {
                            id: author?.id,
                            url: author?.external_urls.spotify,
                            title: author?.name,
                            thumbnails: await Utils.getImage(`https://open.spotify.com/artist/${author?.id}`),
                            isVerified: undefined
                        },
                        duration: {
                            seconds: (track?.duration_ms / 1000).toFixed(0)
                        },
                        thumbnails: await Utils.getImage(`https://open.spotify.com/track/${track?.id}`),
                        isValid: track?.is_playable
                    };
                }));
                return res({
                    title: info[0]?.album?.name,
                    items: await responseItems
                });
            });
        })
    } catch (e) {
        return {
            error: true,
            message: e
        }
    }
}
function getAlbum(url) {
    try {
        return new Promise((res) => {
            SpotifyUrl.getTracks(url).then(async (info) => {
                if (!info || info.error) return res(null)

                let responseItems = Promise.all(info.map(async (track) => {
                    const author = track?.artists[0] && track?.artists[0].id ? track?.artists[0] : track?.artists;
                    return {
                        id: track?.id,
                        title: `${author?.name} - ${track?.name}`,
                        url: `https://open.spotify.com/track/${track?.id}`,
                        author: {
                            id: author?.id,
                            url: author?.external_urls?.spotify,
                            title: author?.name,
                            thumbnails: await Utils.getImage(`https://open.spotify.com/artist/${author?.id}`),
                            isVerified: undefined
                        },
                        duration: {
                            seconds: (track?.duration_ms / 1000).toFixed(0)
                        },
                        thumbnails: await Utils.getImage(`https://open.spotify.com/track/${track?.id}`),
                        isValid: track?.is_playable
                    };
                }));
                return res({
                    title: info[0]?.name,
                    items: await responseItems
                });
            });
        })
    } catch (e) {
        return {
            error: true,
            message: e
        }
    }
}
function isValidTrack(url) {
    let track = getTrack(url);
    return !!track;
}