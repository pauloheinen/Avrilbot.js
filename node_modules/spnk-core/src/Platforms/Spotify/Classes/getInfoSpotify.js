"use strict";
const fetch = require('node-fetch');
const {parse} = require('himalaya');
const Utils = require('./Utils.js');

class getInfoSpotify {
    getData = (url) => {
        return new Promise((resolve) => {
            fetch(Utils.ParseUrlToType(url)).then(resp => resp.text()).then(parse).then(embed => {
                if (embed[0].content) return resolve({error: true, message: embed[0].content});
                let scripts = embed.filter((e) => e.tagName === 'html')[0].children.filter((e) => e.tagName === 'body')[0].children.filter((e) => e.tagName === 'script');
                let resourceScript = scripts.filter((e) => e.attributes.findIndex(a => a.value === 'resource') !== -1);
                let hydrateScript = scripts.filter((e) => e.children[0] && /%22data%22%|"data":/.test(e.children[0].content));

                if (resourceScript.length > 0) return resolve(JSON.parse(decodeURIComponent(resourceScript[0].children[0].content)));
                else if (hydrateScript.length > 0) {
                    let scriptContent = hydrateScript[0].children[0].content.includes('%22data%22%') ? decodeURIComponent(hydrateScript[0].children[0].content) : hydrateScript[0].children[0].content,
                        data = JSON.parse('{' + scriptContent.split('{').slice(1).join('{').trim()).data;
                    return resolve(data.entity ? data.entity : data);
                } else {
                    return resolve({
                        error: true
                    })
                }
            })
        })
    };
    parseIntoPreview = (data) => {
        return new Promise((res) => {
            let images = data.type === 'track' ? data.album.images : data.images;
            return res({
                image: images.reduce((a, b) => (a.width > b.width ? a : b)),
            });
        })
    };
    parseIntoTrackArray = (data) => {
        if (!data.tracks) return [data]; // Is a track or a podcast episode
        else if (data.tracks.items) {
            if (data.tracks.items[0].track) return data.tracks.items.map(t => t.track); // Is a playlist
            else return data.tracks.items; // Is an album
        } else return data.tracks; // Is an artist
    };
};

module.exports.getData = (url) => new getInfoSpotify().getData(url);
module.exports.getPreview = (url) => new getInfoSpotify().getData(url).then(new getInfoSpotify().parseIntoPreview);
module.exports.getTracks = (url) => {
    return new Promise((res) => {
        new getInfoSpotify().getData(url).then(data => {
            if (!data) return res(null);
            return res(new getInfoSpotify().parseIntoTrackArray(data));
        })
    })
}