"use strict";
const getInfoPage = require('./Classes/getInfoPage.js');
const SVideo = require('ytsr');
const getPlaylistInfo = require('ytpl');
const getChannelInfo = require('./getChannelInfo.js');
const {getVideoID} = require('./getID.js');
const {FindMaxRes} = require('./_Utils.js');

module.exports = {
    getPlaylist: getPlaylist,
    isValidVideo: isValidVideo,
    searchVideos: SearchVideo,
    getData: (url, options) => getInfoPage.getInfo(url, options)
}

function getPlaylist(url, max) {
    return new Promise((res) => {
        try {
            getPlaylistInfo(url, {limit: max ? max : 1000}).then(async (response) => {
                return res({
                    title: response.title,
                    author: response.author,
                    items: await Promise.all(response.items.map(CreateInfo)),
                    lastUpdate: response.lastUpdate,
                    isValid: true
                });
            }).catch(() => res(null));
        } catch (e) {
            return res({
                code: e.code,
                isValid: false
            });
        }
    });
}
function SearchVideo(string, max = 15) {
    return new Promise((res) => {
        SVideo(string, {pages: 1}).then((result) => {
            let resultItems = [], response, num = 0;

            for (let i in result.items) {
                if (num >= max) break;
                else if (result.items[i].type === 'video') {
                    num++;
                    resultItems.push(result.items[i]);
                }
            }
            response = resultItems.map((vid) => {
                return {
                    title: vid.title,
                    duration: vid.duration,
                    url: vid.url
                };
            });
            return res(response);
        })
    });
}
function CreateInfo(video) {
    return new Promise(async (res) => {
        return res({
            id: video.id,
            title: video.title,
            url: `https://www.youtube.com/watch?v=${video.id}`,
            author: await getChannelInfo(video.author),
            duration: {
                seconds: video.durationSec
            },
            thumbnails: await FindMaxRes(video.id),
            isLive: video.isLive,
            isUpcoming: !video.isPlayable,
            isPremium: !video.isPlayable,
            isValid: video.isPlayable
        })
    })
}
function isValidVideo(url) {
    return new Promise((res) => {
        let id = getVideoID(url)
        getInfoPage.getInfo(id).then(info => {
            if (info.meta) return res(true);
            return res(false);
        })
    });
}