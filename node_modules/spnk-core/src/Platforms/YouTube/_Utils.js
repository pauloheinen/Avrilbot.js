"use strict";
const {getVideoID} = require("./getID.js");
const https = require('https');
const quality = ['maxresdefault', 'sddefault', 'hqdefault', 'mqdefault', 'default'];
module.exports = {
    isSeek: (url) => {
        let isVideo = getVideoID(url);

        if (isVideo !== undefined) {
            if (url.match(/&t=/)) url = url.split('&t=')[1].split('s')[0];
            else if (url.match(/t=/)) url = url.split('t=')[1];
            return {time: isNaN(parseInt(url)) ? 0 : parseInt(url)};
        } else return {time: 0};
    },
    isFindPlayableFormat: (formats = [], isLive = false) => {
        if (formats.length > 0) {
            if (isLive) return formats[0];
            let NeedFormat = formats.filter(f => f.playable && f.audio.codec === 'opus').sort((a, b) => (b.audio.SampleRate - a.audio.SampleRate));
            return NeedFormat[0];
        } else return [{url: undefined}];
    },
    FindMaxRes: (id) => {
        return new Promise(async (res) => {
            for (let i in quality) {
                let image = await isValid(id, quality[i])
                if (image) return res(image);
            }
        });
    }
};

function isValid(id, quality) {
    return new Promise((res) => {
        https.get("https://i.ytimg.com/vi/" + id + '/' + quality + ".jpg", (response) => {
            if (response.statusCode === 200) return res({
                url: "https://i.ytimg.com/vi/" + id + '/' + quality + ".jpg",
                width: 1920,
                height: 1080
            })
            else return res(null);
        })
    })
}
